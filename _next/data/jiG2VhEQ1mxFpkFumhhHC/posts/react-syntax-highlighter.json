{"pageProps":{"postData":{"id":"react-syntax-highlighter","contentMarkdown":"\r\n# Getting ready to highlight\r\n\r\nIf you're using a Markdown processor like `react-markdown`, you'll be able to wrap code in React components instead of just `<code>` tags in the redered HTML. This feature allows you to have a great degree of flexibility in the resulting HTML output. For example, you can add a custom code display and/or syntax highlighting. Syntax highlighting will highlight each token of code according to their function (i.e. constants, identifies, reserved words, separators). \r\n\r\nI'll be using the `react-syntax-highlighter` library to perform syntax highlighting in this blog. `react-syntax-highlighter` is an NPM package that provides a React component for you to pass the code to and it will perform the highlighting. It is also very configurable, allowing you to do things such as : customizing the langauge, theme, surround div, class name, and more.\r\n\r\nThe package is hosted on NPM so installation is straighforward: \r\n\r\n```bash\r\nnpm install react-syntax-hightlighter\r\n```\r\n\r\nAfterwards, we'll import it as so: \r\n\r\n```jsx\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n```\r\nIf you're using `react-markdown`, you can easily have it use `react-syntax-highlighter` in-place of the usual `<code>` tags like so:\r\n\r\n```jsx\r\n<ReactMarkdown className={styles.articlebody} children={postData.contentMarkdown} \r\n        components = {{\r\n          code({node, inline, className, children, ...props}) {\r\n            if (inline) {\r\n              return (\r\n                <code>{children}</code> \r\n              )\r\n            } else {\r\n              const match = /language-(\\w+)/.exec(className || '');\r\n              const lang = match[1];\r\n              return (\r\n                <SyntaxHighlighter  \r\n                  children={String(children)}\r\n                  language={lang}\r\n                  codeTagProps={{style: {fontFamily: 'Fira Code'}}}\r\n                />\r\n              )\r\n            }\r\n```\r\n\r\nThis code tells `react-markdown` to use `react-syntax-highlighter` when it detects a code block and ignores inline code. You are able to select the language for the syntax highlighter by specifying it in Markdown after the tick marks like so: \r\n\r\n~~~none\r\n```jsx\r\n<MyReactComponent />\r\n```\r\n~~~\r\n\r\nThe language will be passed as a class name and will be prefixed by \"language-\". This means that you'll have to filter it out, perhaps using regular expressions. Styling can be added by passing styling to `codeTagProps`. To disable highlighting, set the language to 'none' in the Markdown.","title":"Highlighting code with react-syntax-highlighter","description":"Using the react-syntax-highlighter to highlight code just like in an IDE.","date":"2022-09-01","publish":true}},"__N_SSG":true}